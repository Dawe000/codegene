import * as React from 'react';
import { useState, useMemo } from 'react';
import { vscode } from './vscodeApi'; // Import from the shared file

interface ExploitCodeProps {
  exploit: {
    name: string;
    vulnerability_name?: string;
    description: string;
    severity: string;
    exploit_code: string;
    mitigation: string;
    hardhat_test?: string;
  };
}

const ExploitCode: React.FC<ExploitCodeProps> = ({ exploit }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [copySuccess, setCopySuccess] = useState('');
  const [hardhatCopySuccess, setHardhatCopySuccess] = useState('');
  
  // Clean the code to remove markdown code fences
  const cleanedCode = useMemo(() => {
    let code = exploit.exploit_code;
    
    // Remove opening code fence (like ```solidity or ```javascript)
    code = code.replace(/^```[\w-]*\n/m, '');
    
    // Remove closing code fence
    code = code.replace(/\n```$/m, '');
    
    return code;
  }, [exploit.exploit_code]);

  // Clean the hardhat test code
  const cleanedHardhatTest = useMemo(() => {
    if (!exploit.hardhat_test) return '';
    
    let code = exploit.hardhat_test;
    
    // Remove opening code fence
    code = code.replace(/^```[\w-]*\n/m, '');
    
    // Remove closing code fence
    code = code.replace(/\n```$/m, '');
    
    return code;
  }, [exploit.hardhat_test]);

  const copyToClipboard = (text: string, setSuccess: React.Dispatch<React.SetStateAction<string>>) => {
    navigator.clipboard.writeText(text)
      .then(() => {
        setSuccess('Copied!');
        setTimeout(() => setSuccess(''), 2000);
      })
      .catch(err => {
        console.error('Failed to copy: ', err);
      });
  };

  const downloadHardhatTest = () => {
    const element = document.createElement('a');
    const file = new Blob([cleanedHardhatTest], {type: 'text/javascript'});
    element.href = URL.createObjectURL(file);
    element.download = `${exploit.name.replace(/\s+/g, '_')}_Exploit.js`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'high': return 'text-red-400 border-red-500/50 bg-red-500/10';
      case 'medium': return 'text-amber-400 border-amber-500/50 bg-amber-500/10';
      case 'low': return 'text-emerald-400 border-emerald-500/50 bg-emerald-500/10';
      default: return 'text-slate-400 border-slate-500/50 bg-slate-500/10';
    }
  };

  return (
    <div className="mb-4 border border-slate-700/50 rounded-xl overflow-hidden bg-slate-800/50 backdrop-blur-sm">
      <div 
        className="p-4 cursor-pointer flex justify-between items-center"
        onClick={() => setIsExpanded(!isExpanded)}
      >
        <div className="flex items-center gap-3">
          <span className="text-red-400">‚ö†Ô∏è</span>
          <span className="font-semibold">{exploit.name}</span>
          <span className={`text-xs px-2 py-0.5 rounded-full ${getSeverityColor(exploit.severity)}`}>
            {exploit.severity}
          </span>
        </div>
        <span>{isExpanded ? '‚ñº' : '‚ñ∂'}</span>
      </div>

      {isExpanded && (
        <div className="border-t border-slate-700/50">
          <div className="p-4 text-sm text-slate-300">
            <p className="mb-3">{exploit.description}</p>
            
            <div className="mt-4">
              <div className="flex justify-between items-center mb-2">
                <h4 className="text-sm font-medium text-slate-400">Exploit Code:</h4>
                <button 
                  onClick={() => copyToClipboard(cleanedCode, setCopySuccess)}
                  className="text-xs px-3 py-1 bg-slate-700 rounded-full hover:bg-slate-600 transition-colors"
                >
                  {copySuccess || 'Copy'}
                </button>
              </div>
              <div className="bg-slate-900 p-4 rounded-lg max-w-full overflow-hidden">
                <pre className="text-xs text-slate-300 whitespace-pre-wrap break-all overflow-wrap-anywhere max-w-full" 
                     style={{ 
                       wordBreak: 'break-word',
                       overflowWrap: 'break-word',
                       whiteSpace: 'pre-wrap'
                     }}>
                  {cleanedCode}
                </pre>
              </div>
            </div>
            
            {/* Add Hardhat Test Section */}
            {exploit.hardhat_test && (
              <div className="mt-6 pt-6 border-t border-slate-700/50">
                <div className="flex justify-between items-center mb-2">
                  <h4 className="text-sm font-medium text-slate-400">Hardhat Test File:</h4>
                  <div className="flex gap-2">
                    <button 
                      onClick={() => copyToClipboard(cleanedHardhatTest, setHardhatCopySuccess)}
                      className="text-xs px-3 py-1 bg-slate-700 rounded-full hover:bg-slate-600 transition-colors"
                    >
                      {hardhatCopySuccess || 'Copy'}
                    </button>
                    <button 
                      onClick={downloadHardhatTest}
                      className="text-xs px-3 py-1 bg-gradient-to-r from-cyan-500 to-blue-500 text-white rounded-full hover:shadow-lg hover:shadow-cyan-500/20 transition-all flex items-center gap-1"
                    >
                      <span className="text-xs">‚¨áÔ∏è</span> Download
                    </button>
                  </div>
                </div>
                <div className="bg-slate-900 p-4 rounded-lg max-w-full overflow-hidden">
                  <div className="mb-3 text-xs text-slate-400">
                    Save this file to a Hardhat project and run with: <code className="bg-slate-800 px-2 py-1 rounded">npx hardhat test</code>
                  </div>
                  <pre className="text-xs text-slate-300 whitespace-pre-wrap break-all overflow-wrap-anywhere max-w-full" 
                       style={{ 
                         wordBreak: 'break-word',
                         overflowWrap: 'break-word',
                         whiteSpace: 'pre-wrap'
                       }}>
                    {cleanedHardhatTest}
                  </pre>
                </div>
              </div>
            )}

            {/* Add a Generate Hardhat Test Button */}
            <div className="mt-4 flex justify-end">
              <button
                onClick={() => {
                  vscode.postMessage({
                    command: 'generateHardhatTest',
                    vulnerabilityType: exploit.vulnerability_name || exploit.name || "Unknown",
                    severity: exploit.severity || "Medium"
                  });
                }}
                className="px-4 py-2 bg-gradient-to-r from-red-500 to-orange-500 text-white rounded-md text-sm flex items-center gap-2 hover:shadow-lg hover:shadow-red-500/20 transition-all"
              >
                <span>üî®</span> Generate Optimized Hardhat Test
              </button>
            </div>
            
            <div className="mt-4">
              <h4 className="text-sm font-medium text-slate-400 mb-2">Mitigation:</h4>
              <p className="text-slate-300">{exploit.mitigation}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ExploitCode;